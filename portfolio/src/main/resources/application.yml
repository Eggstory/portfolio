
server:
  port: 8090
  error:
    whitelabel:
      enabled: false
    path: /error
#    include-exception: false # 오류 응답에 exception의 내용을 포함할지 여부
#    include-stacktrace: never # 오류 응답에 stacktrace 내용을 포함할 지 여부

spring:
  h2:
    console:
      enabled: true
      path: /h2
  profiles:
    active: local
  data:
    redis:
      port: 6379
      host: localhost


  mail:
    host: smtp.gmail.com
    port: 587
    username: khm9963@gmail.com
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
    auth-code-expiration-millis: 1800000

  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB


  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    # org.h2.Driver
    # mariaDB -> org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3306/jwt_oauth2
    #  jdbc:h2:mem:test
    # In-Memory \uBAA8\uB4DC (\uC7AC\uC2DC\uC791 \uC2DC \uB370\uC774\uD130 \uC0AD\uC81C\uB428) : mem
    # Embedded \uBAA8\uB4DC (\uB85C\uCEEC\uC5D0 \uB370\uC774\uD130 \uC800\uC7A5) : ~
    # Server \uBAA8\uB4DC (\uB85C\uCEEC\uC5D0 \uB370\uC774\uD130 \uC800\uC7A5 & H2 \uC124\uCE58 \uD544\uC694)
    # mariaDB -> jdbc:mariadb://localhost:3306/DB\uBA85
    username: root
    password: 1234



  jpa:
    database-platform: org.hibernate.dialect.MariaDB103Dialect
    # org.hibernate.dialect.H2Dialect
    # mariaDB -> org.hibernate.dialect.MariaDB103Dialect
#    show-sql: none
    properties:
      hibernate:
        show_sql: true
        format_sql: true     # \uC548 \uB418\uAE38\uB798 \uC8FC\uC11D\uD568
    hibernate:
      ddl-auto: none  # none create ceate-drop update
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
#    defer-datasource-initialization: true   # 테스트용 (개발완료시 주석처리)

  # delete매핑시 405에러가 뜨던데 이거 쓰면 해결된다면서.. 안되네
  #  mvc:
  #    hiddenmethod:
  #      filter:
  #        enabled: true

#   테스트용 (개발완료시 주석처리)
#  sql:
#    init:
#      data-locations: classpath*:db/dummy.sql
#      mode: always
#      platform: mariadb

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 855614872358-nmape2578gt7l9i3agcbamm9dpigeq21.apps.googleusercontent.com
            client-secret: ${GOOGLE_OAUTH2_KEY}
            scope:
              - profile
              - email
          # google 은 OAuth2-client 라이브러리의 provider 에 redirect-uri , authorization-grant-type 이 있어서 적어줄 필요없다.
          naver:
            client-id: hQ8n8QDlARkf76ZlNvU7
            client-secret: ${NAVER_OAUTH2_KEY}
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8090/login/oauth2/code/naver
          kakao:
            client-id: 1a7d83a034c1e381dd4c56ec7529832f # 앱키 -> REST API 키
            client-secret: ${KAKAO_OAUTH2_KEY} # 카카오 로그인 -> 보안 -> Client Secret 코드
            client-name: kakao
            client-authentication-method: client_secret_post  # kakao는 인증 토큰 발급 요청 메서드가 post이다. (최근 버전에는 작성 방법이 이렇게 바뀌었다.)
            authorization-grant-type: authorization_code
            #redirect-uri: "{baseUrl}/login/oauth2/code/kakao" # yml 파일에서 {} 가 spring 특수문자로 인식되게 하기 위해 " " 사용
            redirect-uri: http://localhost:8090/login/oauth2/code/kakao
            # 카카오 로그인 -> 동의 항목  # profile, account_email
            # OpenID Connect 사용시 ID토큰 재생 공격 방지를 위해 nonce 파라미터 사용을 권장
            # 추가항목 동의 받기 요청시에는 scope 파라미터에 openid를 포함해야 ID 토큰 재발급 가능
            # scope 파라미터 미포함시 동의항목에 구성된 동의 화면 출력
            # openID Connect 사용시 scope에 openid를 포함하여 요청이 처리됨
            # scope 파라미터 포함시 scope에 명시된 동의항목만 출력됨
            # openId Connect 사용시 scope 파라미터에 openid를 포함하여 요청해야 ID토큰 발급 가능
        #            scope:
        #              - profile_nickname
        #              - profile_image
        #              - account_email
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 네이버가 회원정보를 json으로 넘겨주는데, response라는 키값으로 리턴해준다.
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize # "인가 코드 받기" 항목
            token-uri: https://kauth.kakao.com/oauth/token # "토큰 받기" 항목
            user-info-uri: https://kapi.kakao.com/v2/user/me # "사용자 정보 가져오기" 항목
            user-name-attribute: id # 카카오가 회원정보를 json으로 넘겨주는데, id라는 키값으로 리턴해준다. # user-name-attribute는 받아오는 값의 최상단 필드명으로 해줘야한다.
#jwt:
#  header: Authorization
#  secret: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.jBs1AeGIHL1G-Z6yWXp1F0Lg1ysMfy1V_AlUiAaKV82Eo6GMKtkyYfphZs_ReEoVwZWAjduegiWKdSJMoUBb9g

jasypt:
  encryptor:
    bean: jasyptStringEncryptor
    password: ${key}